{
    "define props": {
        "prefix": "props",
        "body": [
            "const props = defineProps<{",
            "\t${1:modelValue}: ${2:string}",
            "}>();$0"
        ],
        "description": "定义组件Props"
    },
    "define props with default value": {
        "prefix": "props-defaults",
        "body": [
            "const props = withDefaults(",
            "\tdefineProps<{",
            "\t\t${1:modelValue}?: ${2:string}",
            "\t}>(),",
            "\t{",
            "\t\t$1: ${3:\"\"}",
            "\t}",
            ");$0"
        ],
        "description": "定义组件Props与默认值"
    },
    "attrs": {
        "prefix": "attrs",
        "body": ["const attrs = useAttrs();"],
        "description": "引用组件Attrs"
    },
    "slots": {
        "prefix": "slots",
        "body": ["const slots = useSlots();"],
        "description": "引用组件Slots"
    },
    "emits in vue less than 3.3": {
        "prefix": "emits3.2",
        "body": [
            "const emit = defineEmits<{",
            "\t(e: \"${1:update:modelValue}\"${2:, value: $3}): void;",
            "}>();$0"
        ],
        "description": "定义组件Emits(低于vue3.3版本旧语法)"
    },
    "emits": {
        "prefix": "emits",
        "body": [
            "const emit = defineEmits<{",
            "\t\"${1:update:modelValue}\": [${2:value: $3}]",
            "}>();$0"
        ],
        "description": "定义组件Emits"
    },
    "expose": {
        "prefix": "expose",
        "body": ["defineExpose({", "\t$1", "});$0"],
        "description": "定义组件Expose"
    },
    "options": {
        "prefix": "options",
        "body": [
            "defineOptions({",
            "\tname:\"$1\"",
            "});$0"
        ],
        "description": "定义组件Options"
    },
    "define ref": {
        "prefix": "ref",
        "body": ["const $1 = ref($2);$0"],
        "description": "定义Ref"
    },
    "define ref with type": {
        "prefix": "reftype",
        "body": [
            "const $1 = ref${2:<$3>}($4${5: as $6});$0"
        ],
        "description": "定义带类型的Ref"
    },
    "define reactive": {
        "prefix": "reactive",
        "body": ["const $1 = reactive($2);$0"],
        "description": "定义Reactive"
    },
    "define reactive with type": {
        "prefix": "reactivetype",
        "body": [
            "const $1 = reactive${2:<$3>}($4${5: as $6});$0"
        ],
        "description": "定义带类型的Reactive"
    },
    "define computed": {
        "prefix": "computed",
        "body": [
            "const $1 = computed(() => ${2:{\n\treturn $4;\n\\}});$0"
        ],
        "description": "定义Computed"
    },
    "define writable computed": {
        "prefix": "computed-writable",
        "body": [
            "const $1 = computed({",
            "\tget: () => ${2:{\n\treturn $4;\n\\}},",
            "\tset: (val) => ($2 = val)",
            "});$0"
        ],
        "description": "定义带有Getter/Setter的Computed"
    },
    "define constant function": {
        "prefix": "func-const",
        "body": [
            "const ${1:func} = $5($2)${4:: void} => {\n\t$3\n}$0"
        ],
        "description": "定义常量函数(不会提升作用域)"
    },
    "define function": {
        "prefix": "func",
        "body": [
            "function ${1:func}$5($2)${4:: void} {\n\t$3\n}$0"
        ],
        "description": "定义函数"
    },
    "define mounted": {
        "prefix": "mounted",
        "body": ["onMounted(() => {\n\t$1\n});$0"],
        "description": "监听Mounted"
    },
    "define unmounted": {
        "prefix": "unmounted",
        "body": ["onUnmounted(() => {\n\t$1\n});$0"],
        "description": "监听Unmounted"
    },
    "swap vars": {
        "prefix": "swap",
        "body": [
            "const temp = ${1:a};",
            "$1 = ${2:b};",
            "$2 = temp;$0"
        ],
        "description": "交换变量值"
    },
    "try catch": {
        "prefix": "trycatch",
        "body": [
            "try {",
            "\t${2://}",
            "} catch (e) {",
            "\t${1:console.error(e);}",
            "}$0"
        ],
        "description": "异常处理"
    },
    "import es module": {
        "prefix": "import",
        "body": ["import { $2 } from \"$1\";$0"],
        "description": "导入模块"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (let ${1:i} = 0, len = ${2:arr}.length; $1 < len; $1++) {",
            "\t${3:const item = $2[$1];}",
            "}$0"
        ],
        "description": "遍历"
    },
    "for in": {
        "prefix": "forin",
        "body": [
            "for (const ${1:index} in ${2:arr}) {",
            "\t$3",
            "}$0"
        ],
        "description": "遍历"
    },
    "for of": {
        "prefix": "forof",
        "body": [
            "for (const ${1:item} of ${2:arr}) {",
            "\t$3",
            "}$0"
        ],
        "description": "遍历"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "${1:arr}.forEach((item${2:, index}) => {",
            "\t$3",
            "});$0"
        ],
        "description": "遍历"
    },
    "replace any": {
        "prefix": "any",
        "body": ["Record<string, unknown>"],
        "description": "不推荐使用any类型"
    },
    "console table": {
        "prefix": "table",
        "body": ["console.table(\"$1\");$0"],
        "description": "打印日志"
    },
    "console time": {
        "prefix": "time",
        "body": [
            "console.time();",
            "$2",
            "console.timeEnd(\"${1:time}\");$0"
        ],
        "description": "打印日志"
    },
    "console group": {
        "prefix": "group",
        "body": [
            "console.group();",
            "$2",
            "console.groupEnd(\"${1:group}\");$0"
        ],
        "description": "打印日志"
    }
}
